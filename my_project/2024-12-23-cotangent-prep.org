* Introduction
:PROPERTIES:
:CUSTOM_ID: introduction
:END:

Suppose we have smooth \(f : M \longrightarrow \mathbb{R}\). Then we can
define the derivative of \(f\) to be \(0\) at a point \(a\) if for a
chart \(\phi_\alpha\) then \(D(f \phi_\alpha^{-1}) = 0\). But this may
not be well-defined. Suppose \(\phi_\beta\) is another chart, setting
\(g \triangleq f \phi_\alpha^{-1}\) and
\(g \triangleq f \phi_\beta^{-1}\) then

\[
g=f \phi_\alpha^{-1}=f \phi_\beta^{-1} \phi_\beta \phi_\alpha^{-1}=h \phi_\beta \phi_\alpha^{-1}
\]

and now we are in the familiar world of calculus on \(\mathbb{R}^n\).

On one definition of an atlas, \(\phi_\beta \phi_\alpha^{-1}\) is smooth
with a smooth inverse. By the chain rule for calculus we have

\[
\frac{\partial g}{\partial x_i}=\sum_j \frac{\partial h}{\partial y_j}(y(x)) \frac{\partial y_j}{\partial x_i}(x)
\]

\(\frac{\partial y_j}{\partial x_i}(x)\) has full rank so we can conclude that

\[
D(f\phi_\alpha^{-1}) = 0 \iff D(f\phi_\beta) = 0
\]

* Transition Maps are Smooth
:PROPERTIES:
:CUSTOM_ID: transition-maps-are-smooth
:END:

Mathlib has its own way of defining manifolds which I won't elaborate
here but this does not use the fact that transition maps are smooth
with a smooth inverse.

Even before that we want the fact that two functions have the same
derivative at a point if they agree on an open set containing that
point.

#+begin_src lean4
import Mathlib.Geometry.Manifold.MFDeriv.Defs
import Mathlib.Geometry.Manifold.Instances.Real
import Mathlib.Analysis.InnerProductSpace.PiL2
import Mathlib.Geometry.Manifold.AnalyticManifold
import Mathlib.Geometry.Manifold.ContMDiff.Atlas
import Mathlib.Geometry.Manifold.MFDeriv.SpecificFunctions

open Manifold

open SmoothManifoldWithCorners

theorem mfderivWithin_congr_of_eq_on_open
  {m n : ‚Ñï} {M N : Type*}
  [TopologicalSpace M]
  [ChartedSpace (EuclideanSpace ‚Ñù (Fin m)) M]
  [SmoothManifoldWithCorners (ùì° m) M]
  [TopologicalSpace N]
  [ChartedSpace (EuclideanSpace ‚Ñù (Fin n)) N]
  [SmoothManifoldWithCorners (ùì° n) N]
  (f g : M ‚Üí N) (s : Set M)
  (ho : IsOpen s)
  (he : ‚àÄ x ‚àà s, f x = g x) :
  ‚àÄ x ‚àà s, mfderivWithin (ùì° m) (ùì° n) f s x = mfderivWithin (ùì° m) (ùì° n) g s x := by
    intros x hy
    exact mfderivWithin_congr (IsOpen.uniqueMDiffWithinAt ho hy) he (he x hy)
#+end_src
